state:
    RIF_map: Map<int, int>
    QRIF: float  // Quantile value to separate hot and cold backends based on RIF.
    num_choices: int  // Number of replicas to sample from the available backends.

init():
    QRIF = 0.8  // Initialize QRIF to 0.8, indicating the cutoff for hot backends is at the 80th percentile.
    num_choices = 3  // Initialize the number of backends to sample to 3.

req(rpc):
    // Choose a subset of replicas
    backends = get_backends()  // Retrieve the list of available backends.
    // Randomly select a subset of backends of size `num_choices`.
    sampled_backends = random_choices(backends, num_choices)  

    RIF_distribution = estimate_RIF_distribution(sampled_backends)
    hot_threshold = quantile(RIF_distribution, QRIF)

    hot_backends = []
    cold_backends = []

    foreach(sampled_backends, lambda(backend):
        RIF = get(RIF_map, backend)
        match(RIF > hot_threshold):
            true => 
                set(hot_backends, size(hot_backends), （backend， RIF))
            false =>
                set(cold_backends, size(cold_backends), (backend, latency))
    )

    selected = 0
    
    match(len(hot_backend)==0):
        true => 
            min_latency = inf
            foreach(cold_backends, lambda(cold_backend):
                backend, latency = cold_backend
                match(RIF < min_RIF):
                    true =>
                        selected = backend
                        min_latency = latency
                    false =>
                        pass
            )

        false => 
            min_RIF = inf
            foreach(hot_backends, lambda(hot_backend):
                backend, RIF = hot_backend
                match(RIF < min_RIF):
                    true =>
                        selected = backend
                        min_RIF = RIF
                    false =>
                        pass
            )


    set(rpc, dst, selected)  // Set the selected backend as the destination for the RPC.
    send(rpc, down)  // Send the RPC downstream to the selected backend.

resp(rpc):
    send(rpc, up)  // Forward the response upstream.
